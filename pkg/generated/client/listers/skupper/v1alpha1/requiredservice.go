/*
Copyright 2021 The Skupper Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/skupperproject/skupper/pkg/apis/skupper/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RequiredServiceLister helps list RequiredServices.
type RequiredServiceLister interface {
	// List lists all RequiredServices in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RequiredService, err error)
	// RequiredServices returns an object that can list and get RequiredServices.
	RequiredServices(namespace string) RequiredServiceNamespaceLister
	RequiredServiceListerExpansion
}

// requiredServiceLister implements the RequiredServiceLister interface.
type requiredServiceLister struct {
	indexer cache.Indexer
}

// NewRequiredServiceLister returns a new RequiredServiceLister.
func NewRequiredServiceLister(indexer cache.Indexer) RequiredServiceLister {
	return &requiredServiceLister{indexer: indexer}
}

// List lists all RequiredServices in the indexer.
func (s *requiredServiceLister) List(selector labels.Selector) (ret []*v1alpha1.RequiredService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RequiredService))
	})
	return ret, err
}

// RequiredServices returns an object that can list and get RequiredServices.
func (s *requiredServiceLister) RequiredServices(namespace string) RequiredServiceNamespaceLister {
	return requiredServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RequiredServiceNamespaceLister helps list and get RequiredServices.
type RequiredServiceNamespaceLister interface {
	// List lists all RequiredServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RequiredService, err error)
	// Get retrieves the RequiredService from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RequiredService, error)
	RequiredServiceNamespaceListerExpansion
}

// requiredServiceNamespaceLister implements the RequiredServiceNamespaceLister
// interface.
type requiredServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RequiredServices in the indexer for a given namespace.
func (s requiredServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RequiredService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RequiredService))
	})
	return ret, err
}

// Get retrieves the RequiredService from the indexer for a given namespace and name.
func (s requiredServiceNamespaceLister) Get(name string) (*v1alpha1.RequiredService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("requiredservice"), name)
	}
	return obj.(*v1alpha1.RequiredService), nil
}
