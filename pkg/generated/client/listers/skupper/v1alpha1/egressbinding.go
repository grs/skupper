/*
Copyright 2021 The Skupper Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/skupperproject/skupper/pkg/apis/skupper/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EgressBindingLister helps list EgressBindings.
type EgressBindingLister interface {
	// List lists all EgressBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EgressBinding, err error)
	// EgressBindings returns an object that can list and get EgressBindings.
	EgressBindings(namespace string) EgressBindingNamespaceLister
	EgressBindingListerExpansion
}

// egressBindingLister implements the EgressBindingLister interface.
type egressBindingLister struct {
	indexer cache.Indexer
}

// NewEgressBindingLister returns a new EgressBindingLister.
func NewEgressBindingLister(indexer cache.Indexer) EgressBindingLister {
	return &egressBindingLister{indexer: indexer}
}

// List lists all EgressBindings in the indexer.
func (s *egressBindingLister) List(selector labels.Selector) (ret []*v1alpha1.EgressBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EgressBinding))
	})
	return ret, err
}

// EgressBindings returns an object that can list and get EgressBindings.
func (s *egressBindingLister) EgressBindings(namespace string) EgressBindingNamespaceLister {
	return egressBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EgressBindingNamespaceLister helps list and get EgressBindings.
type EgressBindingNamespaceLister interface {
	// List lists all EgressBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EgressBinding, err error)
	// Get retrieves the EgressBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EgressBinding, error)
	EgressBindingNamespaceListerExpansion
}

// egressBindingNamespaceLister implements the EgressBindingNamespaceLister
// interface.
type egressBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EgressBindings in the indexer for a given namespace.
func (s egressBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EgressBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EgressBinding))
	})
	return ret, err
}

// Get retrieves the EgressBinding from the indexer for a given namespace and name.
func (s egressBindingNamespaceLister) Get(name string) (*v1alpha1.EgressBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("egressbinding"), name)
	}
	return obj.(*v1alpha1.EgressBinding), nil
}
